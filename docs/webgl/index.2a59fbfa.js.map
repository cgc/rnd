{"mappings":"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","sources":["webgl/node_modules/gl-matrix/esm/common.js","webgl/node_modules/gl-matrix/esm/mat4.js","webgl/node_modules/gl-matrix/esm/vec3.js","webgl/demos/tools.js","webgl/main.js","webgl/demos/shadow-tri-simple.js","webgl/demos/perspective.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","class InvariantError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvariantError\";\n  }\n}\n\nexport function invariant(pred, msg) {\n  if (!pred) {\n    throw new InvariantError(msg || '');\n  }\n}\n\nexport function drawBuffer(regl, framebuffer, scale, offset) {\n  scale = scale || 1;\n  offset = offset || 0;\n  return regl({\n    frag: `\n      precision mediump float;\n      uniform sampler2D buf;\n      uniform float scale;\n      uniform float offset;\n      varying vec2 pos;\n      void main() {\n        gl_FragColor = vec4(texture2D(buf, (pos+1.)/2.).rgb*scale+offset, 1);\n      }\n    `,\n    vert: `\n      precision mediump float;\n      attribute vec2 inPos;\n      varying vec2 pos;\n      void main() {\n        pos = inPos;\n        gl_Position = vec4(pos.x, pos.y, 0, 1);\n      }\n    `,\n    attributes: {\n      inPos: regl.buffer([\n        [-1, -1],\n        [1, -1],\n        [-1, 1],\n        [-1, 1],\n        [1, -1],\n        [1, 1],\n      ]),\n    },\n    uniforms: {\n      scale,\n      offset,\n      buf: framebuffer,\n    },\n    count: 6,\n  })();\n}\n","import regl from 'regl';\n\nimport shadowTriSimple from './demos/shadow-tri-simple.js';\nimport perspective from './demos/perspective.js';\n\nconst demos = {\n  shadowTriSimple,\n  perspective,\n};\n\nlet CURRENT_REGL;\n\nfunction main() {\n  const query = new URLSearchParams(window.location.search);\n  const demo = demos[query.get('demo')];\n  if (demo) {\n    teardown();\n    CURRENT_REGL = regl({\n      extensions: ['OES_texture_float', 'WEBGL_depth_texture'],\n    });\n    demo(CURRENT_REGL);\n  } else {\n    let html = '';\n    for (const key of Object.keys(demos)) {\n      html += `\n        <p><a href=\"?demo=${key}\">${key}</a></p>\n      `;\n    }\n    window.demos.innerHTML = html;\n    //document.body.insertAdjacentHTML('beforeend', html);\n  }\n}\n\nfunction teardown() {\n  if (CURRENT_REGL) {\n    CURRENT_REGL.destroy();\n    CURRENT_REGL = null;\n  }\n}\n\nmain();\n\nif (module.hot) {\n  module.hot.dispose(function (data) {\n    teardown();\n  });\n  module.hot.accept(function (getParents) {});\n}\n","/*\nSome questions:\n**why does p.z/p.w remove triangle?\nI think that's because in the perspective transform, z=w sometimes?\nSo dividing maps you back to the z=1 plane. So that would erase any depth\n\n**why do we do xy/w but not z/w in the frag shader for drawing?\nFrom above reasoning, the xy/w brings us to the z=1 plane. We need this\nto be able to have something in [-1, 1]. On the other hand, z/w would\njust be 1, so that removes our ability to do a comparison\n\n** why are the two above true, even though xxx\nAHCK HACK ANSWER HACK\n\n**can this be done in world space? If so, how do you map in? I'm wondering\nif the point light example relies a lot on the world coordiantes being in [0, 1]\n*/\nimport {mat4,vec3, vec4} from 'gl-matrix';\nimport {drawBuffer} from './tools.js';\n\nexport default function main(regl) {\n  console.dir(regl.context())\n  const positions = [\n    [-1, -1, -4],\n    [1, -1, -4],\n    [0,  1, -4]\n  ];\n\n  const s = 40;\n  const floorPositions = [\n    [-s, -2, -s],\n    [s, -2, -s],\n    [-s, -2, s],\n    [-s, -2, s],\n    [s, -2, -s],\n    [s, -2, s],\n  ];\n\n  const drawShapes = regl({\n    attributes: {\n      position: regl.buffer(positions.concat(floorPositions)),\n      normal: regl.buffer(positions.map(([x, y, z]) => {\n        // normals are a blend of the surface normal and position, convenient\n        // since the object is ~centered on the origin\n        let v = vec3.create();\n        vec3.lerp(v, vec3.fromValues(0, 0, 1), vec3.fromValues(x, y, 0), 0.5);\n        vec3.normalize(v, v);\n        return v;\n      }).concat(floorPositions.map(p => [0, 1, 0]))),\n    },\n    count: 9,\n  })\n\n  const lightPosition = [2, 3, 5]; // in world space\n  const lightView = mat4.lookAt([],\n    lightPosition,\n    [0, 0, 0],\n    [0, 1, 0]);\n\n  const shadowBufferSize = 512;\n  const shadow = regl.framebuffer({\n    radius: shadowBufferSize,\n    colorType: 'float',\n  });\n\n  const projection = ({viewportWidth, viewportHeight}) =>\n    mat4.perspective([], Math.PI / 4, viewportWidth / viewportHeight, 1, 100);\n  const lightProjection = projection({viewportWidth: shadowBufferSize, viewportHeight: shadowBufferSize});\n\n  const computeShadow = regl({\n      frag: `\n        precision mediump float;\n        uniform vec3 lightPosition;\n        varying vec4 pos;\n        varying vec3 wPos;\n        void main() {\n          //gl_FragColor = vec4(vec3(pos.z/pos.w), 1);\n          gl_FragColor = vec4(vec3(length(wPos-lightPosition)), 1);\n        }`,\n\n      vert: `\n        precision mediump float;\n        attribute vec3 position;\n        uniform mat4 projection, view;\n        varying vec4 pos;\n        varying vec3 wPos;\n        void main() {\n          wPos = position;\n          pos = projection * view * vec4(position, 1);\n          gl_Position = pos;\n        }`,\n\n      uniforms: {\n        view: lightView,\n        projection: lightProjection,\n        lightPosition,\n      },\n  });\n\n  const drawShadow = regl({\n    frag: `\n      precision mediump float;\n      uniform vec4 ambient, diffuse, specular;\n\n      uniform vec3 lightPosition;\n      uniform mat4 view;\n      uniform sampler2D shadowMap;\n\n      varying vec4 vPosition;\n      varying vec4 vNormal;\n      varying vec4 vPositionFromLight;\n      varying vec3 wPos;\n\n      void main() {\n        vec3 surfaceNormal = normalize(vNormal.xyz);\n        vec3 toLight = normalize((view * vec4(lightPosition, 1) - vPosition).xyz);\n        vec3 toEye = normalize(-vPosition.xyz);\n\n        float lambert = max(0., dot(toLight, surfaceNormal));\n        vec3 bounce = reflect(-toLight, surfaceNormal);\n        float specularCoef = pow(max(0., dot(bounce, toEye)), 50.);\n        gl_FragColor = ambient + lambert * diffuse + specularCoef * specular;\n\n        vec3 pos = vPositionFromLight.xyz/vPositionFromLight.w;\n        vec2 tex = pos.xy*.5 + .5; // in texture coordinates\n        //float vPosDepth = pos.z;\n        float vPosDepth = length(wPos-lightPosition);\n\n        float mapDepth = texture2D(shadowMap, tex).z;\n        bool valid = 0. < tex.x && tex.x < 1. && 0. < tex.y && tex.y < 1.;\n        float bias = 1.01;\n        if (valid && vPosDepth > mapDepth*bias) {\n          gl_FragColor = ambient;\n        }\n      }`,\n\n    vert: `\n      precision mediump float;\n      attribute vec3 position;\n      attribute vec3 normal;\n      uniform mat4 projection;\n      uniform mat4 view;\n      uniform mat4 lightView;\n      uniform mat4 lightProjection;\n\n      varying vec4 vPosition;\n      varying vec4 vNormal;\n      varying vec4 vPositionFromLight;\n      varying vec3 wPos;\n\n      void main() {\n        wPos = position;\n        vPosition = view * vec4(position, 1);\n        gl_Position = projection * vPosition;\n        // HACK not fully accurate\n        vNormal = view * vec4(normalize(normal), 0);\n        vPositionFromLight = (lightProjection * lightView * vec4(position, 1));\n      }`,\n\n    uniforms: {\n      ambient: [.2, .2, .2, 1],\n      diffuse: [.4, .4, .4, 1],\n      specular: [.2, .2, .2, 1],\n      lightPosition,\n      projection,\n      lightProjection,\n      lightView,\n      shadowMap: shadow,\n      view: ({time}) => {\n        const t = 0.3 * time;\n        return mat4.lookAt([],\n          [5 * Math.sin(t), 2.5, 5],\n          [0, 0.0, 0],\n          [0, 1, 0]);\n      },\n    },\n  });\n  console.log(lightProjection, lightView)\n\n  regl.frame(({time}) => {\n    regl({framebuffer: shadow})(() => {\n      regl.clear({ color: [0, 0, 0, 1], depth: 1 });\n      computeShadow(drawShapes);\n    });\n    regl.clear({ color: [0, 0, 0, 1], depth: 1 });\n    //drawBuffer(regl, shadow.depth || shadow.depthStencil, 1/2, 1/2);\n    //drawBuffer(regl, shadow, 1/30, 1/2);\n    //computeShadow(drawShapes);\n    drawShadow(drawShapes);\n  });\n}\n","import {mat4,vec3, vec4} from 'gl-matrix';\nimport {drawBuffer} from './tools.js';\n\nexport default function main(regl) {\n  const s = 1;\n  const floorPositions = [\n    [-s, 0, -s],\n    [s, 0, -s],\n    [-s, 0, s],\n    [-s, 0, s],\n    [s, 0, -s],\n    [s, 0, s],\n  ];\n\n  const drawShapes = regl({\n    attributes: {\n      position: regl.buffer(floorPositions),\n    },\n    uniforms: {\n      im: regl.prop(\"im\"),\n      model: regl.prop(\"model\"),\n      withPerspective: regl.prop('withPerspective'),\n    },\n    count: floorPositions.length,\n  })\n\n  function makeCheckerboard(color=[0x33, 0x33, 0x33]) {\n    const w = 5;\n    const h = 5;\n    const d = new Uint8Array(w*h*4);\n    for (var r = 0; r < h; r++) {\n      for (var c = 0; c < w; c++) {\n        var idx = 4*(r*w+c);\n        const v = ((r+c)%2==0) ? [0xEE, 0xEE, 0xEE] : color\n        d[idx+0] = v[0];\n        d[idx+1] = v[1];\n        d[idx+2] = v[2];\n        d[idx+3] = 0xFF;\n      }\n    }\n    return regl.texture({\n      width: w,\n      height: h,\n      data: d,\n    })\n  }\n  const red = makeCheckerboard([0xCC, 0x11, 0x11]);\n  const green = makeCheckerboard([0x11, 0xCC, 0x11]);\n\n  const projection = ({viewportWidth, viewportHeight}) =>\n    mat4.perspective([], Math.PI / 4, viewportWidth / viewportHeight, 0.01, 30);\n\n  const drawShadow = regl({\n    frag: `\n      precision mediump float;\n      uniform sampler2D im;\n      varying vec2 co;\n\n      void main() {\n        vec2 tex = co*.5+.5;\n        gl_FragColor = texture2D(im, tex).rgba;\n      }`,\n\n    vert: `\n      precision mediump float;\n      attribute vec3 position;\n      uniform mat4 projection, view, model;\n      uniform bool withPerspective;\n\n      varying vec2 co;\n\n      void main() {\n        co = position.xz;\n        vec4 p = projection * view * model * vec4(position, 1);\n        if (!withPerspective) {\n          p = p / p.w;\n        }\n        gl_Position = p;\n      }`,\n\n    uniforms: {\n      projection,\n      view: ({time}) => {\n        const t = 0.6 * time;\n        return mat4.lookAt([],\n          [5 * Math.sin(t), 2.5, 5],\n          [0, 0.0, 0],\n          [0, 1, 0]);\n      },\n    },\n  });\n\n  regl.frame(({time}) => {\n    regl.clear({ color: [0, 0, 0, 1], depth: 1 });\n    drawShadow(() => {\n      function model(rot, vec) {\n        var m = mat4.identity([]);\n        mat4.translate(m, m, vec);\n        mat4.rotateY(m, m, rot);\n        return m;\n      }\n      const off = 1.2;\n      drawShapes({withPerspective: false, model: model(0, [+off, 0, -off]), im: red});\n      drawShapes({withPerspective: false, model: model(Math.PI/2, [+off, 0, +off]), im: red});\n      drawShapes({withPerspective: true, model: model(0, [-off, 0, -off]), im: green});\n      drawShapes({withPerspective: true, model: model(Math.PI/2, [-off, 0, +off]), im: green});\n    });\n  });\n}\n"],"names":["$3dfc4d8e99186798$export$b67359430d3b1b2","Float32Array","Array","$3dfc4d8e99186798$export$5ada478c8a628231","Math","random","PI","$cea3213dff97d362$export$185802fd694ee1f5","out","$cea3213dff97d362$export$9cd59f9826255e47","a","$cea3213dff97d362$export$784d13d8ee351f07","$cea3213dff97d362$export$a82be99ed2a44a7d","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","$cea3213dff97d362$export$adaa4cf7ef1b65be","$cea3213dff97d362$export$f0954fd7d5368655","$cea3213dff97d362$export$9cb09a71b7d66923","a01","a02","a03","a12","a13","a23","$cea3213dff97d362$export$6897c284b6f9f4dc","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","$cea3213dff97d362$export$33f3c024b4ae00a1","$cea3213dff97d362$export$a04698f914c55ed9","$cea3213dff97d362$export$2060d2db72cce88f","b","b0","b1","b2","b3","$cea3213dff97d362$export$d73ee8ef04f5226a","v","x","y","z","$cea3213dff97d362$export$dcdf75081b88279d","$cea3213dff97d362$export$bb628a54ab399bc9","rad","axis","s","c","t","b12","b20","b21","b22","len","hypot","sin","cos","$cea3213dff97d362$export$a59c8716592e09af","$cea3213dff97d362$export$cf71e4d4ca4d1cfd","$cea3213dff97d362$export$ea6eae3365de5b9c","$cea3213dff97d362$export$bc9e79e74e9fddf6","$cea3213dff97d362$export$832ca188ffb1955d","$cea3213dff97d362$export$926fc125ff3c666c","$cea3213dff97d362$export$dd47cc2f828c32ef","$cea3213dff97d362$export$7dc997d67d2b7f33","$cea3213dff97d362$export$ad5ddaedc8f405df","$cea3213dff97d362$export$9545ac307f2a256b","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","$cea3213dff97d362$export$ff497f2be31cc6a","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","$cea3213dff97d362$export$202e99f82f7f0395","mat","$cea3213dff97d362$export$71dc54d92bd04b57","$cea3213dff97d362$export$df3937d3b537df0a","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","$cea3213dff97d362$export$ddf9c55c9f2be172","sx","sy","sz","$cea3213dff97d362$export$1def1f860edc4b1f","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","$cea3213dff97d362$export$2ff2bbe382249af7","yx","zx","zy","$cea3213dff97d362$export$89b5708c387cac6c","left","right","bottom","top","near","far","rl","tb","nf","$cea3213dff97d362$export$4cf19729ec9a96b8","fovy","aspect","f","tan","Infinity","i","arguments","length","$cea3213dff97d362$export$541149539f3a4684","$cea3213dff97d362$export$294bba99a6af0c0c","$cea3213dff97d362$export$58ae211c788e338f","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","$cea3213dff97d362$export$c5f65ef3eb668f27","lr","bt","$cea3213dff97d362$export$4f2167e613cfc87b","$cea3213dff97d362$export$b1d31ea7b4d854e","$cea3213dff97d362$export$d924e14fd6d9aa66","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","$cea3213dff97d362$export$aa67782f4dc9e52c","target","$cea3213dff97d362$export$42d51816ce590c93","$cea3213dff97d362$export$326827e8268e9cdb","$cea3213dff97d362$export$e16d8520af44a096","$cea3213dff97d362$export$4e2d2ead65e5f7e3","$cea3213dff97d362$export$c697bed75648cdb7","$cea3213dff97d362$export$553579f63bdd7137","$cea3213dff97d362$export$f2599a5cf1109d8","$cea3213dff97d362$export$e9bab7fafb253603","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","$cea3213dff97d362$export$6e3a27864ab166fe","$cea3213dff97d362$export$f93b5905241a7cca","$06ef152ebfb949f5$export$185802fd694ee1f5","$06ef152ebfb949f5$export$9cd59f9826255e47","$06ef152ebfb949f5$export$f24224f1c91d8156","$06ef152ebfb949f5$export$a82be99ed2a44a7d","$06ef152ebfb949f5$export$784d13d8ee351f07","$06ef152ebfb949f5$export$adaa4cf7ef1b65be","$06ef152ebfb949f5$export$e16d8520af44a096","$06ef152ebfb949f5$export$4e2d2ead65e5f7e3","$06ef152ebfb949f5$export$2060d2db72cce88f","$06ef152ebfb949f5$export$cd007d971a5a2143","$06ef152ebfb949f5$export$803ce6b71a0a94b2","ceil","$06ef152ebfb949f5$export$a3fe094919f356fd","floor","$06ef152ebfb949f5$export$96ec731ed4dcb222","min","$06ef152ebfb949f5$export$8960430cfd85939f","$06ef152ebfb949f5$export$2077e0241d6afd3c","round","$06ef152ebfb949f5$export$dcdf75081b88279d","$06ef152ebfb949f5$export$19cedf1da84ba854","$06ef152ebfb949f5$export$9f17032d917177de","$06ef152ebfb949f5$export$88e6ebb4fe54f538","$06ef152ebfb949f5$export$ab44e1323ffc8376","$06ef152ebfb949f5$export$aef51622e549b8b0","$06ef152ebfb949f5$export$70ae2c07e401031b","$06ef152ebfb949f5$export$a3295358bff77e","$06ef152ebfb949f5$export$fc1400facf92c78","$06ef152ebfb949f5$export$94132a0e348806d4","$06ef152ebfb949f5$export$bb646b20bb93d339","$06ef152ebfb949f5$export$3a89f8d6f6bf6c9f","$06ef152ebfb949f5$export$ae8865616f30561c","d","factorTimes2","factor1","factor2","factor3","factor4","$06ef152ebfb949f5$export$b9c5f84610baddaf","inverseFactor","inverseFactorTimesTwo","$06ef152ebfb949f5$export$4385e60b38654f68","r","zScale","$06ef152ebfb949f5$export$5ffbd13800309d59","m","$06ef152ebfb949f5$export$f0bfa0a0024626ee","$06ef152ebfb949f5$export$c32adef9e939ce85","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","$06ef152ebfb949f5$export$a59c8716592e09af","p","$06ef152ebfb949f5$export$cf71e4d4ca4d1cfd","$06ef152ebfb949f5$export$ea6eae3365de5b9c","$06ef152ebfb949f5$export$944b09d2ad10b378","mag","cosine","acos","$06ef152ebfb949f5$export$7f9972325ebfd559","$06ef152ebfb949f5$export$42d51816ce590c93","$06ef152ebfb949f5$export$f2599a5cf1109d8","$06ef152ebfb949f5$export$e9bab7fafb253603","vec","$06ef152ebfb949f5$export$f93b5905241a7cca","$06ef152ebfb949f5$export$6e3a27864ab166fe","$06ef152ebfb949f5$export$159d9494db57879b","$06ef152ebfb949f5$export$6c4a311cc157c764","$06ef152ebfb949f5$export$2422cd6c492a8b3a","$06ef152ebfb949f5$export$99d8dd3f32a3435","$06ef152ebfb949f5$export$4b80e395e36b5a56","stride","offset","count","fn","arg","l","Error","$7d15d62d0083e486$var$demos","regl","console","dir","context","positions","floorPositions","drawShapes","attributes","position","buffer","concat","normal","map","$06ef152ebfb949f5$exports","create","lerp","fromValues","normalize","lightPosition","lightView","$cea3213dff97d362$exports","lookAt","shadow","framebuffer","radius","colorType","projection","viewportWidth","viewportHeight","perspective","lightProjection","computeShadow","frag","vert","uniforms","view","drawShadow","ambient","diffuse","specular","shadowMap","time","log","frame","clear","color","depth","im","prop","model","withPerspective","makeCheckerboard","Uint8Array","idx","texture","width","height","data","red","green","rot","identity","translate","rotateY","$7d15d62d0083e486$var$CURRENT_REGL","$7d15d62d0083e486$var$teardown","destroy","query","URLSearchParams","window","location","search","demo","get","$parcel$interopDefault","$e30523e3782241c6$exports","extensions","html","key","Object","keys","demos","innerHTML","$7d15d62d0083e486$var$main"],"version":3,"file":"index.2a59fbfa.js.map"}