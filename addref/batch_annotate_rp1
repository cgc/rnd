#!/Users/carlos/pu/env/bin/python
from dptrp1 import dptrp1

def annotate_entry(e):
    import tempfile, subprocess
    with tempfile.NamedTemporaryFile() as f:
        print(f'{e["entry_name"]} downloading...', end=' ', flush=True)
        d.download_file(e['entry_path'], f.name)

        # Check to see if we previously annotated (but don't have a title or author above...)
        from pdfrw import PdfReader
        trailer = PdfReader(f.name)
        if trailer.Info.GROBID_update:
            print('previously annotated. skipping.')
            return

        print('annotating...', end=' ', flush=True)
        try:
            stdout = subprocess.check_output(['./annotatepdf', f.name])
        except Exception as err:
            print('stdout:', err.stdout)
            print('stderr:', err.stderr)
            raise

        # This is a bit of a hack: we directly upload a new file without deleting/recreating
        # the old metadata that existed. We do still wind up losing our current page with
        # this scheme unfortunately...
        print('uploading...', end=' ', flush=True)
        with open(f.name, 'rb') as fh:
            doc_url = "/documents/{doc_id}/file".format(doc_id=e['entry_id'])
            files = {"file": (dptrp1.quote_plus(e['entry_name']), fh, "rb")}
            d._put_endpoint(doc_url, files=files).raise_for_status()
        print('done')

if __name__ == '__main__':
    # make our api instance
    d = dptrp1.DigitalPaper()

    # load auth files & authenticate
    found_deviceid, found_privatekey = dptrp1.find_auth_files()
    with open(found_deviceid) as f:
        did = f.read().strip()
    with open(found_privatekey) as f:
        key = f.read().strip()
    d.authenticate(did, key)

    # find unnamed files; we include all missing either title or author
    entries = d.list_documents()
    unnamed = [e for e in entries if not e.get('title') or not e.get('author')]

    for e in unnamed:
        try:
            annotate_entry(e)
        except KeyboardInterrupt:
            raise
        except:
            import traceback
            traceback.print_exc()
